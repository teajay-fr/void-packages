# Template file for 'cross-${_triplet}'
_binutils_version=2.31.1
_gcc_version=7.3.1
_gcc_download_version=7.3.0
_newlib_version=3.0.0.20180831

_triplet=arm-none-eabi
_sysroot="/usr/${_triplet}"

pkgname=cross-${_triplet}
version=0.4
revision=1
short_desc="GNU cross bare metal toolchain"
maintainer="Thomas Bernard <thomas@famillebernardgouriou.fr>"
homepage="https://www.voidlinux.org/"
license="GPL-2.0-or-later, GPL-3.0-or-later, LGPL-2.1.0-or-later"
distfiles="
 ${GNU_SITE}/binutils/binutils-${_binutils_version}.tar.xz
 ${GNU_SITE}/gcc/gcc-${_gcc_download_version}/gcc-${_gcc_download_version}.tar.xz
 http://sources.redhat.com/pub/newlib/newlib-${_newlib_version}.tar.gz"

checksum="5d20086ecf5752cc7d9134246e9588fa201740d540f7eb84d795b1f7a93bca86
 832ca6ae04636adbb430e865a1451adf6979ab44ca1c8374f61fba65645ce15c
 3ad3664f227357df15ff34e954bfd9f501009a647667cd307bf0658aefd6eb5b"

lib32disabled=yes
nocross=yes
nopie=yes
nostrip=yes
nodebug=yes
create_wrksrc=yes

hostmakedepends="perl flex bison"
makedepends="zlib-devel gmp-devel mpfr-devel libmpc-devel isl16-devel libelf"

_apply_patch() {
	local args="$1" pname="$(basename $2)"

	if [ ! -f ".${pname}_done" ]; then
		patch -N $args -i $2
		touch .${pname}_done
	fi
}

pre_build() {
	msg_normal "Preparing gcc source tree\n"
}

_binutils_build() {
	local _args

	[ -f ${wrksrc}/.binutils_build_done ] && return 0

	cd ${wrksrc}
	msg_normal "Building cross binutils\n"
	[ ! -d binutils-build ] && mkdir binutils-build
	cd binutils-build
	_args="--prefix=/usr"
	_args+=" --target=${_triplet}"
	_args+=" --with-sysroot=${_sysroot}"
	_args+=" --disable-nls"
	_args+=" --disable-werror"
	_args+=" --disable-sim"
	_args+=" --disable-gdb"
	_args+=" --enable-interwork"
	_args+=" --enable-ld=default"
	_args+=" --enable-plugins"
	_args+=" --enable-deterministic-archives"

	../binutils-${_binutils_version}/configure ${_args}

	make configure-host
	make ${makejobs}
	make install

	touch ${wrksrc}/.binutils_build_done
}

_gcc_bootstrap() {
	local _args
	local _gcc_args

	[ -f ${wrksrc}/.gcc_bootstrap_done ] && return 0

	cd ${wrksrc}/gcc-${_gcc_download_version}
	_apply_patch -p1 ${FILESDIR}/arm-gcc-embedded.patch

	msg_normal "Building cross gcc bootstrap\n"

	[ ! -d ../gcc-bootstrap ] && mkdir ../gcc-bootstrap
	cd ../gcc-bootstrap

	_args="--prefix=/usr"
	_args+=" --target=${_triplet}"
	_args+=" --enable-languages=c "
	_args+=" --disable-decimal-float "
	_args+=" --disable-libffi "
	_args+=" --disable-libgomp "
	_args+=" --disable-libmudflap "
	_args+=" --disable-libquadmath "
	_args+=" --disable-libssp "
	_args+=" --disable-libstdcxx-pch "
	_args+=" --disable-nls "
	_args+=" --disable-shared "
	_args+=" --disable-threads "
	_args+=" --disable-tls "
	_args+=" --with-newlib "
	_args+=" --without-headers "
	_args+=" --with-gnu-as "
	_args+=" --with-gnu-ld "
	_args+=" --with-sysroot=/usr/arm-none-eabi"
	_args+=" --with-python-dir=share/gcc-arm-none-eabi"
	_args+=" --with-multilib-list=rmprofile"
	_gcc_args="--with-host-libstdcxx=-static-libgcc -Wl,-Bstatic,-lstdc++,-Bdynamic -lm"
	CFLAGS="-O0 -g0" CXXFLAGS="-O0 -g0" \
		../gcc-${_gcc_download_version}/configure ${_args} "${_gcc_args}"

	make ${makejobs} -s all-gcc
	make install-gcc

	touch ${wrksrc}/.gcc_bootstrap_done
}

_newlib_build() {
	local _args

	[ -f ${wrksrc}/.newlib_build_done ] && return 0

	cd ${wrksrc}
	msg_normal "Building cross newlib\n"

	[ ! -d newlib-build ] && mkdir newlib-build
	cd newlib-build

	export CFLAGS_FOR_TARGET="-O2 -ffunction-sections -fdata-sections"

	_args="--prefix=/usr"
	_args+=" --target=${_triplet}"
	_args+=" --enable-newlib-io-long-long"
	_args+=" --enable-newlib-io-c99-formats"
	_args+=" --enable-newlib-register-fini"
	_args+=" --enable-newlib-retargetable-locking"
	_args+=" --disable-newlib-supplied-syscalls"
	_args+=" --disable-nls"

	../newlib-${_newlib_version}/configure ${_args}

	make ${makejobs}
	make DESTDIR=${DESTDIR} install

	touch ${wrksrc}/.newlib_build_done
}

_newlib_nano_build() {
	local _args

	[ -f ${wrksrc}/.newlib_nano_build_done ] && return 0

	cd ${wrksrc}
	msg_normal "Building cross newlib nano\n"

	[ ! -d newlib-nano-build ] && mkdir newlib-nano-build
	cd newlib-nano-build

	export CFLAGS_FOR_TARGET="-g -Os -ffunction-sections -fdata-sections"

	_args="--prefix=/usr"
	_args+=" --target=${_triplet}"
	_args+=" --disable-newlib-supplied-syscalls"
	_args+=" --enable-newlib-reent-small"
	_args+=" --disable-newlib-fvwrite-in-streamio"
	_args+=" --disable-newlib-fseek-optimization"
	_args+=" --disable-newlib-wide-orient"
	_args+=" --enable-newlib-nano-malloc"
	_args+=" --disable-newlib-unbuf-stream-opt"
	_args+=" --enable-lite-exit"
	_args+=" --enable-newlib-global-atexit"
	_args+=" --enable-newlib-nano-formatted-io"
	_args+=" --disable-nls"

	../newlib-${_newlib_version}/configure ${_args}

		make ${makejobs}
	make DESTDIR=${DESTDIR}.nano install
	touch ${wrksrc}/.newlib_nano_build_done
}


_gcc_build() {

	[ -f ${wrksrc}/.gcc_build_done ] && return 0

	cd ${wrksrc}
	msg_normal "Building cross gcc newlib\n"

	[ ! -d gcc-build ] && mkdir gcc-build
	cd gcc-build

	export CFLAGS='-g -O2 -pipe -ffunction-sections -fdata-sections'
	export CXXFLAGS='-g -O2 -pipe -ffunction-sections -fdata-sections'
	_do_gcc_build "/usr" "--enable-plugins"
	touch ${wrksrc}/.gcc_build_done
}

_gcc_nano_build() {

	[ -f ${wrksrc}/.gcc_nano_build_done ] && return 0

	cd ${wrksrc}
	msg_normal "Building cross gcc newlib nano\n"

	[ ! -d gcc-nano-build ] && mkdir gcc-nano-build
	cd gcc-nano-build

	export CFLAGS='-g -Os -pipe -ffunction-sections -fdata-sections'
	export CXXFLAGS='-g -Os -pipe -ffunction-sections -fdata-sections -fno-exceptions'
	_do_gcc_build "${DESTDIR}.nano/usr"

	touch ${wrksrc}/.gcc_nano_build_done
}


_do_gcc_build() {
	unset LD AS CPP

	local _args
	local _gcc_args

		export CC="gcc"
		_args="--prefix=/usr"
		_args+=" --host=${XBPS_CROSS_TRIPLET}"
		_args+=" --target=${_triplet}"
		_args+=" --with-sysroot=$1/${_triplet}"
		_args+=" --quiet"
		_args+=" --enable-languages=c,c++"
		_args+=" --disable-decimal-float"
		_args+=" --disable-libffi"
		_args+=" --disable-libgomp"
		_args+=" --disable-libmudflap"
		_args+=" --disable-libquadmath"
		_args+=" --disable-libssp"
		_args+=" --disable-libstdcxx-pch"
		_args+=" --disable-nls"
		_args+=" --disable-shared"
		_args+=" --disable-threads"
		_args+=" --disable-tls"
		_args+=" --disable-target-libiberty"
		_args+=" --with-gnu-as"
		_args+=" --with-gnu-ld"
		_args+=" --with-system-zlib"
		_args+=" --with-newlib"
		_args+=" --with-headers=yes"
		_args+=" --with-python-dir=share/gcc-arm-none-eabi"
		_args+=" --with-multilib-list=rmprofile"
		_gcc_args="--with-host-libstdcxx=-static-libgcc -Wl,-Bstatic,-lstdc++,-Bdynamic -lm"

		../gcc-${_gcc_download_version}/configure ${_args} "${_gcc_args}" "$2"

	make ${makejobs} INHIBIT_LIBC_CFLAGS='-DUSE_TM_CLONE_REGISTRY=0'

}

do_build() {
	for f in include lib bin; do
		if [ ! -d ${_sysroot}/usr/${f} ]; then
			mkdir -p ${_sysroot}/usr/${f}
		fi
		if [ ! -h ${_sysroot}/${f} ]; then
			ln -sfr ${_sysroot}/usr/${f} ${_sysroot}/${f}
		fi
	done

	# Ensure we use sane environment
	unset CC CXX CPP LD AS AR RANLIB OBJDUMP READELF NM
	unset CFLAGS CXXFLAGS CPPFLAGS LDFLAGS
	export CFLAGS="-Os" CXXFLAGS="-Os"

	_binutils_build
	# Copy binutils to a temporary directory to build the nano libs
	# and corresponding gcc libstdcxx
	cp -r ${_sysroot} /usr/nano

	_gcc_bootstrap
		_newlib_nano_build
		_newlib_build
		_gcc_build
		_gcc_nano_build
}

do_install() {
	for f in include lib bin; do
		if [ ! -d ${DESTDIR}/${_sysroot}/usr/${f} ]; then
			echo "Creating directory ${f}"
			mkdir -p ${DESTDIR}/${_sysroot}/usr/${f}
		fi
		if [ ! -h ${DESTDIR}/${_sysroot}/${f} ]; then
			echo "Linking directory ${f}"
			ln -sfr ${DESTDIR}/${_sysroot}/usr/${f} \
				${DESTDIR}/${_sysroot}/${f}
		fi
	done
	# install cross binutils
	cd ${wrksrc}/binutils-build
	make DESTDIR=${DESTDIR} install

	# install cross gcc
	cd ${wrksrc}/gcc-build
	make DESTDIR=${DESTDIR} install

	cd ${wrksrc}/gcc-nano-build
	make DESTDIR=${DESTDIR}.nano install

	# we need only libstdc nano files
	multilibs=( $(${DESTDIR}/usr/bin/${_triplet}-gcc -print-multi-lib 2>/dev/null)  )
	for multilib in "${multilibs[@]}"; do
		dir="${multilib%%;*}"
		src_dir=${DESTDIR}.nano/usr/${_triplet}/lib/${dir}
		dst_dir=${DESTDIR}/${_sysroot}/lib/${dir}
		cp -f "${src_dir}/libstdc++.a" "${dst_dir}/libstdc++_nano.a"
		cp -f "${src_dir}/libsupc++.a" "${dst_dir}/libsupc++_nano.a"
		cp -f "${src_dir}/libc.a" "${dst_dir}/libc_nano.a"
		cp -f "${src_dir}/libg.a" "${dst_dir}/libg_nano.a"
		cp -f "${src_dir}/librdimon.a" "${dst_dir}/librdimon_nano.a"
		cp -f "${src_dir}/nano.specs" "${dst_dir}/"
		cp -f "${src_dir}/rdimon.specs" "${dst_dir}/"
		cp -f "${src_dir}/nosys.specs" "${dst_dir}/"
		cp -f "${src_dir}/"*crt0.o "${dst_dir}/"
	done

	# Copy the nano configured newlib.h file into the location expected by nano.specs
	mkdir -p ${DESTDIR}/usr/${_triplet}/include/newlib-nano
	cp -f ${DESTDIR}.nano/usr/${_triplet}/include/newlib.h ${DESTDIR}/usr/${_triplet}/include/newlib-nano/newlib.h

		# strip host binaries
	find ${DESTDIR}/usr/bin/ -name arm-none-eabi-\* -exec /usr/bin/strip '{}' \;
	find ${DESTDIR}/usr/${_triplet}/bin/ -maxdepth 1 -mindepth 1 -name \* -exec /usr/bin/strip '{}' \;
	find ${DESTDIR}/usr/lib/gcc/arm-none-eabi/${_gcc_version}/ -maxdepth 1 -name \* -perm /111 -and ! -type d -exec /usr/bin/strip '{}' \;

	# strip target binaries
	find ${DESTDIR}/${_sysroot}/usr/lib \( -name "*.a" -or -name "*.o" \) -exec ${_triplet}-objcopy -R .comment -R .note -R .debug_info -R .debug_aranges -R .debug_pubnames -R .debug_pubtypes -R .debug_abbrev -R .debug_line -R .debug_str -R .debug_ranges -R .debug_loc '{}' \;
	find ${DESTDIR}/usr/lib/gcc/${_triplet}/${_gcc_version} \( -name "*.a" -or -name "*.o" \) -exec ${_triplet}-objcopy -R .comment -R .note -R .debug_info -R .debug_aranges -R .debug_pubnames -R .debug_pubtypes -R .debug_abbrev -R .debug_line -R .debug_str -R .debug_ranges -R .debug_loc '{}' \;

		# Remove unnecessary stuff
	rm -rf ${DESTDIR}.nano
	rm -f ${DESTDIR}/usr/lib*/libiberty.a
	rm -rf ${DESTDIR}/usr/share
	rm -rf ${DESTDIR}/${_sysroot}/{sbin,etc,var}
	rm -rf ${DESTDIR}/${_sysroot}/usr/{sbin,share,libexec}
	rm -rf ${DESTDIR}/${_sysroot}/usr/lib/gconv
	rm -f ${DESTDIR}/usr/lib/libcc1.*
	rm -f ${DESTDIR}/${_sysroot}/libexec
}
